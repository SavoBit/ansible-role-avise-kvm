---
- name: Avi SE | KVM | Requirements
  include: requirements.yml

- name: Set the location of cloud image
  set_fact:
    IMAGE: "/var/lib/libvirt/images/{{ kvm_vm_hostname }}.qcow2"

- name: Creates directory
  file:
   path: /root/{{ kvm_vm_hostname }}
   state: directory

- name: Create the meta-data config file for vm
  template:
    src: avi_meta-data.j2
    dest: /root/{{ kvm_vm_hostname }}/avi_meta-data

- name: Create the user-data config file for vm
  template:
    src: user-data.j2
    dest: /root/{{ kvm_vm_hostname }}/user-data

- name: Copy se qcow2 file
  command: cp {{ kvm_vm_base_img }} /var/lib/libvirt/images/
  when: kvm_vm_base_img is defined

- name: Rename se qcow2 file
  command: mv /var/lib/libvirt/images/{{ kvm_vm_base_img }} {{ IMAGE }}
  when: kvm_vm_base_img is defined

- name: Set the location of cloud image
  set_fact:
    USER_DATA: /root/{{ kvm_vm_hostname }}/user-data

- name: Set the location of cloud image
  set_fact:
    META_DATA: /root/{{ kvm_vm_hostname }}/avi_meta-data

- name: Copy se qcow2 file
  command: cp /root/{{ kvm_vm_hostname }}/se.qcow2 /var/lib/libvirt/images/
  when: kvm_vm_base_img is undefined

- name: Rename se qcow2 file
  command: mv /var/lib/libvirt/images/se.qcow2 {{ IMAGE }}
  when: kvm_vm_base_img is undefined

- name: Get interface Name from virt_intf_name
  shell: >
    ethtool -i {{ item }} | grep "bus-info" | cut -f2 -d " "
  register: intf_name
  loop: "{{ virt_intf_name }}"

- name: Replace and update interface name
  set_fact:
    data: "pci_{{ item['stdout_lines'][0]  | regex_replace('[:.]', '_') }}"
  register: result
  with_items: "{{ intf_name['results'] }}"

- name: Initialize an empty string
  set_fact:
    host_dv_str: ""

- name: Generate host device string
  set_fact:
    host_dv_str:  "{{ host_dv_str }} --host-device={{ item['ansible_facts']['data'] }}"
  loop: "{{ result['results'] }}"

- name: Generated host device string
  debug: msg="{{ host_dv_str }}"

- name: Create CD-ROM ISO with cloud-init config
  command: >
    genisoimage -input-charset utf-8 -output {{ CI_ISO }} -volid cidata -joliet -r {{ USER_DATA }} {{ META_DATA }}
  ignore_errors: yes

- name: " Run if pinning is yes "
  command: >
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio --check all=off --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --noautoconsole {{ host_dv_str }}
  register: vm_xml_content
  when:  pinning_option == "yes"

- name: "If Pinning No"
  command: > 
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio --check all=off --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --noautoconsole {{ host_dv_str }}
  register: vm_xml_content
  when: pinning_option == "no"

- name: Eject cdrom
  command: "virsh change-media {{ kvm_vm_hostname }} hda --eject --config"

- name: Remove CI_ISO
  command: "rm {{ CI_ISO }}"
